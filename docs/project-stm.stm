role FREEUSER{
    Person{
        //1.1
        read(name), read(surname), read(username), read(role)
        //1.2
        read(subscriptions)
        //1.3
        update(name) constrainedBy[self = caller]
        update(surname) constrainedBy[self = caller]
        update(password) constrainedBy[self = caller]
        
        //1.4
        add(subscriptions) constrainedBy[self = caller and self.subscriptions-> size() < 3]
        //1.5
        remove(subscriptions) constrainedBy[self = caller]
        
        //1.6
        read(attends) constrainedBy[self = caller]
        //1.7
        remove(attends) constrainedBy[self = caller and target.owner <> caller]

        //1.9 (upon acceptance of invitation)
        read(invitations) constrainedBy[self = caller]
        add(attends) constrainedBy[self = caller and (self.invitations->exists(i|i.event=target) or target.attendants->size() = 0)]

        //1.10 1.11
        read(manages), read(events) constrainedBy[self = caller]

        //1.16
        add(requests) constrainedBy[self = caller]
        //1.17
        read(requests) constrainedBy[self = caller]

        //1.21 after a freeuser creates his own event
        add(events) constrainedBy[self = caller and target.owner = null]
        add(manages) constrainedBy[self = caller and target.managedBy->size() = 0]
    }
    Event{
        //1.7
        remove(attendants) constrainedBy[target = caller and self.owner <> caller]
        
        //1.12
        read(title), read(description), read(lat), read(lon),
        read(date), read(hour), read(min)

        //1.13
        read(owner), read(categories)

        //1.14
        read(attendants) constrainedBy[self.attendants->includes(caller)]

        //1.15
        read(invitations) constrainedBy[self.managedBy->includes(caller)]
        add(categories), remove(categories) constrainedBy[self.managedBy->size() = 0 or self.managedBy->includes(caller)] // relax for initialization
        update(title) constrainedBy[self.title = null or self.managedBy->includes(caller)]
        update(description) constrainedBy[self.description = null or self.managedBy->includes(caller)]
        update(lat) constrainedBy[self.lat = null or self.managedBy->includes(caller)]
        update(lon) constrainedBy[self.lon = null or self.managedBy->includes(caller)]
        update(date) constrainedBy[self.date = null or self.managedBy->includes(caller)]
        update(hour) constrainedBy[self.hour = null or self.managedBy->includes(caller)]
        update(min) constrainedBy[self.min = null or self.managedBy->includes(caller)]
        read(managedBy) constrainedBy[self.managedBy->includes(caller)]
        read(requesters), remove(requesters) constrainedBy[self.managedBy->includes(caller)]
        add(attendants) constrainedBy[self.managedBy->includes(caller) and self.requesters->includes(target)]

        //1.16
        add(requesters) constrainedBy[target = caller]

        //1.21
        create constrainedBy[caller.events->size() < 5]
    }
    Category{
        //1.4
        add(subscribers) constrainedBy[target = caller and target.subscriptions->size() < 3]
        //1.5
        remove(subscribers) constrainedBy[target = caller]

        //1.18 1.19
        read(name), read(events)
        //1.20
        read(subscribers), read(moderators) constrainedBy[self.subscribers->includes(caller)]
        
    }
    Invite{
        //1.8
        read(invitedBy), read(event), read(invitee) constrainedBy[self.invitee = caller or self.invitedBy = caller]

        //1.9
        delete constrainedBy[self.invitee = caller]

        //1.15
        create
        update(event) constrainedBy[self.event = null and value.managedBy->includes(caller)]
        update(invitedBy) constrainedBy[self.invitedBy = null and value = caller]
        update(invitee) constrainedBy[self.invitee = null]
    }
}

role PREMIUMUSER extends FREEUSER{
    Person{
        fullAccess
    }
    Event{
        //2.3
        
        //add(managedBy) constrainedBy[self.owner = caller]
    }
    Category {
        fullAccess
    }
    Invite{
        fullAccess
    }
}
role MODERATOR{
    Person{
        fullAccess
    }
    Event{
        fullAccess
    }
    Category{
        fullAccess
    }
    Invite{
        fullAccess
    }
}
role ADMIN{
    Person{
        fullAccess
    }
    Event{
        fullAccess
    }
    Category{
        fullAccess
    }
    Invite{
        fullAccess
    }
}

//Necessary for the login procedure. Do not change.
role SYSTEM{
    Person{
        read(username)
        read(password)
        read(role)
    }
}

