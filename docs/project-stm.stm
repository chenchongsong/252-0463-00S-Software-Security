role FREEUSER{
    Person{
        //1.1 read any userâ€™s name, surname, role, and username
        read(name), read(surname), read(username), read(role)
        //1.2 for any user, read a list of their subscriptions
        read(subscriptions)
        //1.3 edit their own name, surname, and password
        update(name) constrainedBy[self = caller]
        update(surname) constrainedBy[self = caller]
        update(password) constrainedBy[self = caller]
        
        //1.6 read a list of events attended
        read(attends) constrainedBy[self = caller]
        //1.7 leave an event attended
        remove(attends) constrainedBy[self = caller and target.owner <> caller]

        //1.9 (upon acceptance/rejection of invitation)
        read(invitations) constrainedBy[self = caller]
        add(attends) constrainedBy[
            self = caller and
            (self.invitations->exists(i|i.event=target) or target.attendants->size() = 0) and
            not (target.owner.role = Role::FREEUSER and target.attendants->size()+target.invitations->size() > 4)
        ]
        // Before a user accept an invitation,
        // target.attendants->size()+target.invitations->size() can sum up to 4,
        // so a ">" sign is used here

        //1.10 1.11 read a list of events they manage/own
        read(manages), read(events) constrainedBy[self = caller]

        //1.16 request to attend an event
        add(requests) constrainedBy[self = caller]
        //1.17 read a list of their own pending requests
        read(requests) constrainedBy[self = caller]

        //1.21 after a freeuser creates his own event
        add(events) constrainedBy[self = caller and target.owner = null]
        add(manages) constrainedBy[self = caller and target.managedBy->size() = 0]
    }
    Event{
        
        //1.12 1.3 read event details
        read(title), read(description), read(lat), read(lon),
        read(date), read(hour), read(min)
        read(owner), read(categories)

        //1.14 read a list of event attendants if attending
        read(attendants) constrainedBy[self.attendants->includes(caller)]

        //1.15 as an event manager...
        read(invitations) constrainedBy[self.managedBy->includes(caller)]
        add(categories), remove(categories) constrainedBy[self.managedBy->size() = 0 or self.managedBy->includes(caller)] // relax for initialization
        update(title) constrainedBy[self.title = null or self.managedBy->includes(caller)]
        update(description) constrainedBy[self.description = null or self.managedBy->includes(caller)]
        update(lat) constrainedBy[self.lat = null or self.managedBy->includes(caller)]
        update(lon) constrainedBy[self.lon = null or self.managedBy->includes(caller)]
        update(date) constrainedBy[self.date = null or self.managedBy->includes(caller)]
        update(hour) constrainedBy[self.hour = null or self.managedBy->includes(caller)]
        update(min) constrainedBy[self.min = null or self.managedBy->includes(caller)]
        read(managedBy) constrainedBy[self.managedBy->includes(caller)]
        read(requesters), remove(requesters) constrainedBy[self.managedBy->includes(caller)]
        add(attendants) constrainedBy[
            self.managedBy->includes(caller) and
            self.requesters->includes(target) and
            not (self.owner.role = Role::FREEUSER and self.attendants->size()+self.invitations->size() >= 4)
        ] // accept a request

        //1.16 request to attend an event
        add(requesters) constrainedBy[target = caller]

        //1.21 create an event
        create constrainedBy[caller.events->size() < 5]
    }
    Category{
        //1.4 1.5 subscribe/unsubscribe
        add(subscribers) constrainedBy[target = caller and target.subscriptions->size() < 3]
        remove(subscribers) constrainedBy[target = caller]

        //1.18 1.19 read the name of category and events related
        read(name), read(events)
        //1.20 read lists of categories' subscribers and moderators
        read(subscribers), read(moderators) constrainedBy[self.subscribers->includes(caller)]
        
    }
    Invite{
        //1.8 read a list of events they are currently invited to and who invited them
        read(invitedBy), read(event), read(invitee) constrainedBy[self.invitee = caller or self.invitedBy = caller]

        //1.9 (after acceptance/rejection of invitation)
        delete constrainedBy[self.invitee = caller]

        //1.15 create an event, and then do one-time initialization
        create
        update(event) constrainedBy[
            self.event = null and
            value.managedBy->includes(caller) and
            not (value.owner.role = Role::FREEUSER and value.attendants->size()+value.invitations->size() >= 4)
        ]
        update(invitedBy) constrainedBy[self.invitedBy = null and value = caller]
        update(invitee) constrainedBy[self.invitee = null]
    }
}
role PREMIUMUSER extends FREEUSER{
    Person{
    }
    Event{
        //2.2
        create
        //2.3
        add(managedBy), remove(managedBy) constrainedBy[
            self.owner = caller and
            self.attendants->includes(target) and
            target <> self.owner
        ]
        //2.4
        read(attendants)
    }
    Category {
        //2.1
        add(subscribers) constrainedBy[target = caller] 
    }
    Invite{
    }
}

role MODERATOR extends PREMIUMUSER{
    Person{
        //3.1
        read(moderates) constrainedBy[self = caller]
    }
    Event{
        //3.2 edit events in a category they moderate
        update(title), update(description) constrainedBy[not self.categories->intersection(caller.moderates)->isEmpty()]
    }
    Category{  
    }
    Invite{
    }
}
role ADMIN extends MODERATOR{
    Person{
        //4.1 4.2
        create
        update(name), update(username), update(surname), update(password), update(role)
    }
    Event{
    }
    Category{
        // 4.3 4.4
        create
        update(name)
        read(moderators)
        //4.5 4.6
        add(moderators)
        remove(moderators)
    }
    Invite{
    }
}

//Necessary for the login procedure. Do not change.
role SYSTEM{
    Person{
        read(username)
        read(password)
        read(role)
    }
}

