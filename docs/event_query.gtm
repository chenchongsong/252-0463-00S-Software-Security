Window EventQueryWindow{

    Label Text1_L {
        String text := ['Search for all events that I ']
    }
    ComboBox Events_CB {
        //TODO: define all the options
        //NOTE: 'Role' below added for compilation purposes
        //      replace it with the appropriate type
        Set(String) rows := [Set{"am attending", "was invited","requested to join"}]
        String selected  := [null]
        Label times { 
            event onView (text) {
                try{
                    text :=[$Events_CB.row$]
                } catch (SecurityException){
                    text := ['RESTRICTED']
                }
            }
        }
    }
    Label Text2_L {
        String text := ['where at least']
    }
    
    TextField Param_TF{
        String text := [null]
    }

    Label Text3_L {
        String text := ['person/people from the following group']
    }
    Table Table_People_T{
        //TODO: show all people
        //NOTE: 'Role' below added for compilation purposes
        //      replace it with the appropriate type
        Set(Person) rows := [Person.allInstances()]
        Set(Person) selected  := [null]
        columns {
            ['People'] : Label username {
                event onView (text){
                    try{
                        text := [$Table_People_T.row$.name.concat(" ").concat($Table_People_T.row$.surname)]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }

    Label Text4_L {
        String text := ["is/are among the event's"]
    }
     
    ComboBox Role_CB {
        //TODO: define all the options
        //NOTE: 'Role' below added for compilation purposes
        //      replace it with the appropriate type
        Set(String) rows := [Set{"attendants", "managers", "owners"}]
        String selected  := [null]
        Label times { 
            event onView (text) {
                try{
                    //TODO: show each option
                    text :=[$Role_CB.row$]
                } catch (SecurityException){
                    text := ['RESTRICTED']
                }
            }
        }
    }
    Button Search_B{
        String text := ['Search']
        Set(Event) first_filter_results := [Set{}]
        Set(Event) second_filter_results := [Set{}]
        Set(Person) related_people := [Set{}]
        event onClick{
            //TODO: implement the query                
            if [($Param_TF.text$.oclIsUndefined()) or
                ($Param_TF.text$.toInteger().oclIsInvalid()) or
                ($Param_TF.text$.toInteger() < 0) or
                ($Role_CB.selected$.oclIsUndefined()) or
                ($Table_People_T.selected$->oclIsUndefined()) or
                ($Table_People_T.selected$->size() < 1)] { 
                notification(['Error'],['Invalid Input'],[500])  
            } else {
                // first filter
                first_filter_results := [Set{}]
                if [($Events_CB.selected$ = "am attending")] {
                    first_filter_results := [$EventQueryWindow.caller$.attends]
                } else {
                    if [($Events_CB.selected$ = "was invited")] {
                        first_filter_results := [$EventQueryWindow.caller$.invitations->collect(i|i.event)->asSet()]
                    } else {
                        if [($Events_CB.selected$ = "requested to join")] {
                            first_filter_results := [$EventQueryWindow.caller$.requests]
                        } else { // nothing selected in First ComboBox
                            first_filter_results := [Event.allInstances()]
                        }
                    }
                }

                // second filter
                second_filter_results := [Set{}]
                foreach filtered_event in [$first_filter_results$] {
                    // get related_people with selected role 
                    related_people := [Set{}]
                    if [$Role_CB.selected$ = "attendants"]{
                        related_people := [$filtered_event$.attendants]
                    } else {
                        if [($Role_CB.selected$ = "managers")]{
                            related_people := [$filtered_event$.managedBy]
                        } else {
                            if [($Role_CB.selected$ = "owners")] {
                                related_people := [$filtered_event$.owner->asSet()]
                            }
                        }
                    }
                    // add filtered_event to the final result if conditions satisfied
                    if [$Table_People_T.selected$->select(p|$related_people$->includes(p))->size()>=$Param_TF.text$.toInteger()]{
                        second_filter_results := [$second_filter_results$->union($filtered_event$->asSet())]
                    }
                }

                // show results
                reevaluate Table_T.rows // clear out original events in Table_T
                Table_T.rows := [$second_filter_results$]
            }
        }
    }

    Label Text5_L {
        String text := ['Results:']
    }
    Table Table_T{
        //TODO: show the result of the query
        //NOTE: 'Role' below added for compilation purposes
        //      replace it with the appropriate type
        Set(Event) rows := [Set{}]
        columns {
            ['Title'] : Label title {
                event onView (text){
                    try{
                       //TODO: show the event title
                       text := [$Table_T.row$.title]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }

    Button Back_B{
        String text := ['Back']
        event onClick{
            back
        }
    }
}

